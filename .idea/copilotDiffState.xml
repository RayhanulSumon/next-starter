<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/api/auth/[...nextauth]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/auth/[...nextauth]/route.ts" />
              <option name="originalContent" value="import NextAuth from &quot;next-auth&quot;;&#10;import CredentialsProvider from &quot;next-auth/providers/credentials&quot;;&#10;&#10;const handler = NextAuth({&#10;  providers: [&#10;    CredentialsProvider({&#10;      name: &quot;Credentials&quot;,&#10;      credentials: {&#10;        username: { label: &quot;Username&quot;, type: &quot;text&quot; },&#10;        password: { label: &quot;Password&quot;, type: &quot;password&quot; }&#10;      },&#10;      async authorize(credentials) {&#10;        // Replace this with your own logic to validate credentials&#10;        if (credentials?.username === &quot;admin&quot; &amp;&amp; credentials?.password === &quot;admin&quot;) {&#10;          return { id: &quot;1&quot;, name: &quot;Admin User&quot;, email: &quot;admin@example.com&quot; };&#10;        }&#10;        return null;&#10;      }&#10;    })&#10;  ],&#10;  session: {&#10;    strategy: &quot;jwt&quot;&#10;  },&#10;  pages: {&#10;    signIn: &quot;/login&quot;&#10;  }&#10;});&#10;&#10;export { handler as GET, handler as POST };&#10;" />
              <option name="updatedContent" value="// This file is no longer needed. All authentication is now handled via a custom hook and axios." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/login/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/login/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;&#10;// Define an interface for API error responses&#10;interface ApiError {&#10;  data: {&#10;    message?: string;&#10;    [key: string]: unknown; // Changed from any to unknown to satisfy ESLint rules&#10;  };&#10;}&#10;&#10;// Type guard to check if an error is an API error&#10;function isApiError(err: unknown): err is ApiError {&#10;  return Boolean(&#10;    err &amp;&amp; &#10;    typeof err === 'object' &amp;&amp; &#10;    'data' in err &amp;&amp; &#10;    err.data &amp;&amp; &#10;    typeof err.data === 'object'&#10;  );&#10;}&#10;&#10;export default function LoginPage() {&#10;  // Use enhanced auth context with loginLoading state&#10;  const { login, user, loginLoading, loading: authLoading } = useAuth();&#10;  const router = useRouter();&#10;&#10;  // Form state&#10;  const [identifier, setIdentifier] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Redirect when authenticated&#10;  useEffect(() =&gt; {&#10;    if (user &amp;&amp; !authLoading) {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }, [user, authLoading, router]);&#10;&#10;  const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;&#10;    // Clear previous errors&#10;    setError(null);&#10;&#10;    try {&#10;      // Use the login method from enhanced auth context&#10;      await login(identifier, password);&#10;      // No need to redirect here, the useEffect will handle it&#10;    } catch (err: unknown) {&#10;      // Improved error handling with proper type checking&#10;      if (isApiError(err)) {&#10;        // Handle structured API errors with type-safe access to message&#10;        setError(err.data.message || &quot;Login failed&quot;);&#10;      } else if (err instanceof Error) {&#10;        setError(err.message || &quot;Login failed&quot;);&#10;      } else {&#10;        setError(&quot;Login failed. Please try again.&quot;);&#10;      }&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded shadow-lg&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Login to Your Account&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;label htmlFor=&quot;identifier&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;            Email or Phone&#10;          &lt;/label&gt;&#10;          &lt;input&#10;            id=&quot;identifier&quot;&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Enter your email or phone&quot;&#10;            value={identifier}&#10;            onChange={e =&gt; setIdentifier(e.target.value)}&#10;            className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;            required&#10;            autoComplete=&quot;username&quot;&#10;            disabled={loginLoading}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between&quot;&gt;&#10;            &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              Password&#10;            &lt;/label&gt;&#10;            &lt;Link&#10;              href=&quot;/reset-password&quot;&#10;              className=&quot;text-sm text-blue-600 hover:underline&quot;&#10;            &gt;&#10;              Forgot password?&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;          &lt;input&#10;            id=&quot;password&quot;&#10;            type=&quot;password&quot;&#10;            placeholder=&quot;Enter your password&quot;&#10;            value={password}&#10;            onChange={e =&gt; setPassword(e.target.value)}&#10;            className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;            required&#10;            autoComplete=&quot;current-password&quot;&#10;            disabled={loginLoading}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div&#10;            className=&quot;p-3 bg-red-50 border border-red-200 text-red-700 rounded&quot;&#10;            role=&quot;alert&quot;&#10;          &gt;&#10;            {error}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          className=&quot;w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:outline-none transition disabled:opacity-50 disabled:bg-blue-400&quot;&#10;          disabled={loginLoading}&#10;          aria-busy={loginLoading}&#10;        &gt;&#10;          {loginLoading ? &quot;Logging in...&quot; : &quot;Login&quot;}&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;mt-4 text-center&quot;&gt;&#10;          &lt;p className=&quot;text-sm&quot;&gt;&#10;            Don&amp;apos;t have an account?{' '}&#10;            &lt;Link href=&quot;/register&quot; className=&quot;text-blue-600 hover:underline&quot;&gt;&#10;              Register here&#10;            &lt;/Link&gt;&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;&#10;// Define an interface for API error responses&#10;interface ApiError {&#10;  data: {&#10;    message?: string;&#10;    [key: string]: unknown; // Changed from any to unknown to satisfy ESLint rules&#10;  };&#10;}&#10;&#10;// Type guard to check if an error is an API error&#10;function isApiError(err: unknown): err is ApiError {&#10;  return Boolean(&#10;    err &amp;&amp; &#10;    typeof err === 'object' &amp;&amp; &#10;    'data' in err &amp;&amp; &#10;    err.data &amp;&amp; &#10;    typeof err.data === 'object'&#10;  );&#10;}&#10;&#10;export default function LoginPage() {&#10;  // Use enhanced auth context with loginLoading state&#10;  const { login, user, loginLoading, loading: authLoading } = useAuth();&#10;  const router = useRouter();&#10;&#10;  // Form state&#10;  const [identifier, setIdentifier] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Redirect when authenticated&#10;  useEffect(() =&gt; {&#10;    if (user &amp;&amp; !authLoading) {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }, [user, authLoading, router]);&#10;&#10;  const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;&#10;    // Clear previous errors&#10;    setError(null);&#10;&#10;    try {&#10;      // Use the login method from enhanced auth context&#10;      await login(identifier, password);&#10;      // No need to redirect here, the useEffect will handle it&#10;    } catch (err: unknown) {&#10;      // Improved error handling with proper type checking&#10;      if (isApiError(err)) {&#10;        // Handle structured API errors with type-safe access to message&#10;        setError(err.data.message || &quot;Login failed&quot;);&#10;      } else if (err instanceof Error) {&#10;        setError(err.message || &quot;Login failed&quot;);&#10;      } else {&#10;        setError(&quot;Login failed. Please try again.&quot;);&#10;      }&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded shadow-lg&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Login to Your Account&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;label htmlFor=&quot;identifier&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;            Email or Phone&#10;          &lt;/label&gt;&#10;          &lt;input&#10;            id=&quot;identifier&quot;&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Enter your email or phone&quot;&#10;            value={identifier}&#10;            onChange={e =&gt; setIdentifier(e.target.value)}&#10;            className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;            required&#10;            autoComplete=&quot;username&quot;&#10;            disabled={loginLoading}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between&quot;&gt;&#10;            &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              Password&#10;            &lt;/label&gt;&#10;            &lt;Link&#10;              href=&quot;/reset-password&quot;&#10;              className=&quot;text-sm text-blue-600 hover:underline&quot;&#10;            &gt;&#10;              Forgot password?&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;          &lt;input&#10;            id=&quot;password&quot;&#10;            type=&quot;password&quot;&#10;            placeholder=&quot;Enter your password&quot;&#10;            value={password}&#10;            onChange={e =&gt; setPassword(e.target.value)}&#10;            className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;            required&#10;            autoComplete=&quot;current-password&quot;&#10;            disabled={loginLoading}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div&#10;            className=&quot;p-3 bg-red-50 border border-red-200 text-red-700 rounded&quot;&#10;            role=&quot;alert&quot;&#10;          &gt;&#10;            {error}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          className=&quot;w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:outline-none transition disabled:opacity-50 disabled:bg-blue-400&quot;&#10;          disabled={loginLoading}&#10;          aria-busy={loginLoading}&#10;        &gt;&#10;          {loginLoading ? &quot;Logging in...&quot; : &quot;Login&quot;}&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;mt-4 text-center&quot;&gt;&#10;          &lt;p className=&quot;text-sm&quot;&gt;&#10;            Don&amp;apos;t have an account?{' '}&#10;            &lt;Link href=&quot;/register&quot; className=&quot;text-blue-600 hover:underline&quot;&gt;&#10;              Register here&#10;            &lt;/Link&gt;&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/reset-password/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/reset-password/page.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function ResetPasswordPage() {&#10;  const router = useRouter();&#10;  const { requestPasswordReset, resetPassword, requestResetLoading, resetLoading } = useAuth();&#10;  &#10;  // State for the initial request step&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [phone, setPhone] = useState(&quot;&quot;);&#10;  const [requestSent, setRequestSent] = useState(false);&#10;  const [requestError, setRequestError] = useState&lt;string | null&gt;(null);&#10;  &#10;  // State for the reset step&#10;  const [token, setToken] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [passwordConfirmation, setPasswordConfirmation] = useState(&quot;&quot;);&#10;  const [resetError, setResetError] = useState&lt;string | null&gt;(null);&#10;  const [resetSuccess, setResetSuccess] = useState(false);&#10;  &#10;  // Handle the initial password reset request&#10;  const handleRequestReset = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setRequestError(null);&#10;    &#10;    try {&#10;      // At least one of email or phone must be provided&#10;      if (!email &amp;&amp; !phone) {&#10;        setRequestError(&quot;Please provide either an email or phone number&quot;);&#10;        return;&#10;      }&#10;      &#10;      const response = await requestPasswordReset({ &#10;        email: email || undefined, &#10;        phone: phone || undefined &#10;      });&#10;      &#10;      setRequestSent(true);&#10;      // If there's a code in the response, pre-fill it&#10;      if (response.code) {&#10;        setToken(response.code);&#10;      }&#10;    } catch (error) {&#10;      if (error instanceof Error) {&#10;        setRequestError(error.message);&#10;      } else {&#10;        setRequestError(&quot;Failed to request password reset&quot;);&#10;      }&#10;    }&#10;  };&#10;  &#10;  // Handle the actual password reset&#10;  const handleResetPassword = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setResetError(null);&#10;    &#10;    // Validate passwords match&#10;    if (password !== passwordConfirmation) {&#10;      setResetError(&quot;Passwords do not match&quot;);&#10;      return;&#10;    }&#10;    &#10;    try {&#10;      await resetPassword({&#10;        email: email || undefined,&#10;        phone: phone || undefined,&#10;        token: token || undefined,&#10;        password,&#10;        password_confirmation: passwordConfirmation&#10;      });&#10;      &#10;      setResetSuccess(true);&#10;      &#10;      // Redirect to login after a delay&#10;      setTimeout(() =&gt; {&#10;        router.replace(&quot;/login&quot;);&#10;      }, 3000);&#10;      &#10;    } catch (error) {&#10;      if (error instanceof Error) {&#10;        setResetError(error.message);&#10;      } else {&#10;        setResetError(&quot;Failed to reset password&quot;);&#10;      }&#10;    }&#10;  };&#10;  &#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded shadow-lg&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Reset Your Password&lt;/h1&gt;&#10;      &#10;      {!requestSent ? (&#10;        // Step 1: Request password reset&#10;        &lt;form onSubmit={handleRequestReset} className=&quot;space-y-4&quot;&gt;&#10;          &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;            Enter your email or phone number to receive a password reset code.&#10;          &lt;/p&gt;&#10;          &#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              Email&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;email&quot;&#10;              type=&quot;email&quot;&#10;              placeholder=&quot;Enter your email&quot;&#10;              value={email}&#10;              onChange={e =&gt; setEmail(e.target.value)}&#10;              className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;              disabled={requestResetLoading}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;label htmlFor=&quot;phone&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              Phone Number&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;phone&quot;&#10;              type=&quot;tel&quot;&#10;              placeholder=&quot;Enter your phone number&quot;&#10;              value={phone}&#10;              onChange={e =&gt; setPhone(e.target.value)}&#10;              className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;              disabled={requestResetLoading}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &#10;          {requestError &amp;&amp; (&#10;            &lt;div&#10;              className=&quot;p-3 bg-red-50 border border-red-200 text-red-700 rounded&quot;&#10;              role=&quot;alert&quot;&#10;            &gt;&#10;              {requestError}&#10;            &lt;/div&gt;&#10;          )}&#10;          &#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:outline-none transition disabled:opacity-50&quot;&#10;            disabled={requestResetLoading}&#10;          &gt;&#10;            {requestResetLoading ? &quot;Sending...&quot; : &quot;Send Reset Instructions&quot;}&#10;          &lt;/button&gt;&#10;          &#10;          &lt;div className=&quot;mt-4 text-center&quot;&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;&#10;              Remember your password?{&quot; &quot;}&#10;              &lt;Link href=&quot;/login&quot; className=&quot;text-blue-600 hover:underline&quot;&gt;&#10;                Login here&#10;              &lt;/Link&gt;&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      ) : resetSuccess ? (&#10;        // Success message&#10;        &lt;div className=&quot;text-center py-8&quot;&gt;&#10;          &lt;div className=&quot;text-green-600 mb-4 text-xl&quot;&gt;&#10;            Password reset successful!&#10;          &lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;&#10;            Your password has been reset. You&amp;apos;ll be redirected to the login page shortly.&#10;          &lt;/p&gt;&#10;          &lt;Link&#10;            href=&quot;/login&quot;&#10;            className=&quot;inline-block mt-4 text-blue-600 hover:underline&quot;&#10;          &gt;&#10;            Login now&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      ) : (&#10;        // Step 2: Enter new password with token&#10;        &lt;form onSubmit={handleResetPassword} className=&quot;space-y-4&quot;&gt;&#10;          &lt;p className=&quot;text-sm text-gray-600 mb-4&quot;&gt;&#10;            Enter the reset code you received and your new password.&#10;          &lt;/p&gt;&#10;          &#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;label htmlFor=&quot;token&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              Reset Code&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;token&quot;&#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Enter reset code&quot;&#10;              value={token}&#10;              onChange={e =&gt; setToken(e.target.value)}&#10;              className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;              disabled={resetLoading}&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              New Password&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;password&quot;&#10;              type=&quot;password&quot;&#10;              placeholder=&quot;Enter new password&quot;&#10;              value={password}&#10;              onChange={e =&gt; setPassword(e.target.value)}&#10;              className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;              disabled={resetLoading}&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;label htmlFor=&quot;passwordConfirmation&quot; className=&quot;block text-sm font-medium&quot;&gt;&#10;              Confirm Password&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              id=&quot;passwordConfirmation&quot;&#10;              type=&quot;password&quot;&#10;              placeholder=&quot;Confirm new password&quot;&#10;              value={passwordConfirmation}&#10;              onChange={e =&gt; setPasswordConfirmation(e.target.value)}&#10;              className=&quot;w-full p-2 border rounded focus:ring-2 focus:ring-blue-500 focus:outline-none&quot;&#10;              disabled={resetLoading}&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &#10;          {resetError &amp;&amp; (&#10;            &lt;div&#10;              className=&quot;p-3 bg-red-50 border border-red-200 text-red-700 rounded&quot;&#10;              role=&quot;alert&quot;&#10;            &gt;&#10;              {resetError}&#10;            &lt;/div&gt;&#10;          )}&#10;          &#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:outline-none transition disabled:opacity-50&quot;&#10;            disabled={resetLoading}&#10;          &gt;&#10;            {resetLoading ? &quot;Resetting...&quot; : &quot;Reset Password&quot;}&#10;          &lt;/button&gt;&#10;          &#10;          &lt;button&#10;            type=&quot;button&quot;&#10;            onClick={() =&gt; setRequestSent(false)}&#10;            className=&quot;w-full mt-2 bg-gray-100 text-gray-700 p-2 rounded hover:bg-gray-200 focus:ring-2 focus:ring-blue-500 focus:outline-none transition&quot;&#10;            disabled={resetLoading}&#10;          &gt;&#10;            Back to Request Form&#10;          &lt;/button&gt;&#10;        &lt;/form&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/auth-context.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/auth-context.tsx" />
              <option name="originalContent" value="import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import axios from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;interface User {&#10;  id: number;&#10;  name: string;&#10;  email: string;&#10;  // Add more fields as needed&#10;}&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  loading: boolean;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; Promise&lt;void&gt;;&#10;  register: (data: { name: string; email: string; password: string; password_confirmation: string }) =&gt; Promise&lt;void&gt;;&#10;  fetchUser: () =&gt; Promise&lt;void&gt;;&#10;}&#10;&#10;interface LoginResponse {&#10;  token: string;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const AuthProvider = ({ children }: { children: ReactNode }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;&#10;  // Set axios defaults&#10;  axios.defaults.baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';&#10;  axios.defaults.withCredentials = true;&#10;&#10;  // Attach token from cookie if exists&#10;  axios.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  const fetchUser = async (): Promise&lt;void&gt; =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const { data } = await axios.get&lt;User&gt;('/api/user');&#10;      setUser(data);&#10;    } catch {&#10;      setUser(null);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string): Promise&lt;void&gt; =&gt; {&#10;    await axios.get('/sanctum/csrf-cookie');&#10;    const { data } = await axios.post&lt;LoginResponse&gt;('/login', { email, password });&#10;    Cookies.set('token', data.token);&#10;    await fetchUser();&#10;  };&#10;&#10;  const register = async (data: { name: string; email: string; password: string; password_confirmation: string }): Promise&lt;void&gt; =&gt; {&#10;    await axios.get('/sanctum/csrf-cookie');&#10;    await axios.post('/register', data);&#10;    await login(data.email, data.password);&#10;  };&#10;&#10;  const logout = async (): Promise&lt;void&gt; =&gt; {&#10;    await axios.post('/logout');&#10;    Cookies.remove('token');&#10;    setUser(null);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchUser();&#10;  }, []);&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, loading, login, logout, register, fetchUser }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) throw new Error('useAuth must be used within AuthProvider');&#10;  return context;&#10;};" />
              <option name="updatedContent" value="import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import Cookies from 'js-cookie';&#10;import { axiosClient } from './use-api';&#10;&#10;interface User {&#10;  id: number;&#10;  name: string;&#10;  email: string;&#10;  // Add more fields as needed&#10;}&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  loading: boolean;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; Promise&lt;void&gt;;&#10;  register: (data: { name: string; email: string; password: string; password_confirmation: string }) =&gt; Promise&lt;void&gt;;&#10;  fetchUser: () =&gt; Promise&lt;void&gt;;&#10;}&#10;&#10;interface LoginResponse {&#10;  token: string;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const AuthProvider = ({ children }: { children: ReactNode }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;&#10;  const fetchUser = async (): Promise&lt;void&gt; =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const { data } = await axiosClient.get&lt;User&gt;('/api/user');&#10;      setUser(data);&#10;    } catch {&#10;      setUser(null);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.get('/sanctum/csrf-cookie');&#10;    const { data } = await axiosClient.post&lt;LoginResponse&gt;('/login', { email, password });&#10;    Cookies.set('token', data.token);&#10;    await fetchUser();&#10;  };&#10;&#10;  const register = async (data: { name: string; email: string; password: string; password_confirmation: string }): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.get('/sanctum/csrf-cookie');&#10;    await axiosClient.post('/register', data);&#10;    await login(data.email, data.password);&#10;  };&#10;&#10;  const logout = async (): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.post('/logout');&#10;    Cookies.remove('token');&#10;    setUser(null);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchUser();&#10;  }, []);&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, loading, login, logout, register, fetchUser }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) throw new Error('useAuth must be used within AuthProvider');&#10;  return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/use-api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/use-api.ts" />
              <option name="originalContent" value="import { useMemo } from 'react';&#10;import axios, { AxiosInstance } from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;/**&#10; * axiosClient - Globally configured Axios instance&#10; * - Sets baseURL and withCredentials&#10; * - Attaches token from cookie to Authorization header&#10; * - Handles interceptors for request/response&#10; */&#10;export const axiosClient: AxiosInstance = (() =&gt; {&#10;  const instance = axios.create({&#10;    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',&#10;    withCredentials: true,&#10;  });&#10;&#10;  // Request interceptor: attach token from cookie&#10;  instance.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  // Response interceptor: handle errors globally if needed&#10;  instance.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;      // You can handle global errors here (e.g., logout on 401)&#10;      return Promise.reject(error);&#10;    }&#10;  );&#10;&#10;  return instance;&#10;})();" />
              <option name="updatedContent" value="import { useMemo } from 'react';&#10;import axios, { AxiosInstance } from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;/**&#10; * axiosClient - Globally configured Axios instance&#10; * - Sets baseURL and withCredentials&#10; * - Attaches token from cookie to Authorization header&#10; * - Handles interceptors for request/response&#10; */&#10;export const axiosClient: AxiosInstance = (() =&gt; {&#10;  const instance = axios.create({&#10;    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',&#10;    withCredentials: true,&#10;  });&#10;&#10;  // Request interceptor: attach token from cookie&#10;  instance.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  // Response interceptor: handle errors globally if needed&#10;  instance.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;      // You can handle global errors here (e.g., logout on 401)&#10;      return Promise.reject(error);&#10;    }&#10;  );&#10;&#10;  return instance;&#10;})();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/types/js-cookie.d.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/types/js-cookie.d.ts" />
              <option name="updatedContent" value="// Type definitions for js-cookie&#10;// Project: https://github.com/js-cookie/js-cookie&#10;// Definitions by: Andi Dittrich &lt;https://github.com/AndiDittrich&gt;&#10;//                 Rafael Siegelmann &lt;https://github.com/rafaelsg&gt;&#10;//                 BendingBender &lt;https://github.com/BendingBender&gt;&#10;//                 Leonard Thieu &lt;https://github.com/leonard-thieu&gt;&#10;// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped&#10;&#10;export interface CookieAttributes {&#10;    expires?: number | Date;&#10;    path?: string;&#10;    domain?: string;&#10;    secure?: boolean;&#10;    sameSite?: 'strict' | 'lax' | 'none';&#10;}&#10;&#10;export interface CookiesStatic&lt;T = undefined&gt; {&#10;    get(name: string): string | undefined;&#10;    get(): { [key: string]: string };&#10;    set(name: string, value: string, options?: CookieAttributes): void;&#10;    remove(name: string, options?: CookieAttributes): void;&#10;}&#10;&#10;declare const Cookies: CookiesStatic;&#10;export default Cookies;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>