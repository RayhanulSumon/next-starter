<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/api/auth/[...nextauth]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/auth/[...nextauth]/route.ts" />
              <option name="originalContent" value="import NextAuth from &quot;next-auth&quot;;&#10;import CredentialsProvider from &quot;next-auth/providers/credentials&quot;;&#10;&#10;const handler = NextAuth({&#10;  providers: [&#10;    CredentialsProvider({&#10;      name: &quot;Credentials&quot;,&#10;      credentials: {&#10;        username: { label: &quot;Username&quot;, type: &quot;text&quot; },&#10;        password: { label: &quot;Password&quot;, type: &quot;password&quot; }&#10;      },&#10;      async authorize(credentials) {&#10;        // Replace this with your own logic to validate credentials&#10;        if (credentials?.username === &quot;admin&quot; &amp;&amp; credentials?.password === &quot;admin&quot;) {&#10;          return { id: &quot;1&quot;, name: &quot;Admin User&quot;, email: &quot;admin@example.com&quot; };&#10;        }&#10;        return null;&#10;      }&#10;    })&#10;  ],&#10;  session: {&#10;    strategy: &quot;jwt&quot;&#10;  },&#10;  pages: {&#10;    signIn: &quot;/login&quot;&#10;  }&#10;});&#10;&#10;export { handler as GET, handler as POST };&#10;" />
              <option name="updatedContent" value="// This file is no longer needed. All authentication is now handled via a custom hook and axios." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/dashboard/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/dashboard/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useEffect } from &quot;react&quot;;&#10;&#10;export default function DashboardPage() {&#10;  const { user, loading } = useAuth();&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    if (!loading &amp;&amp; !user) {&#10;      router.replace(&quot;/login&quot;);&#10;    }&#10;  }, [user, loading, router]);&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded text-center&quot;&gt;Loading...&lt;/div&gt;;&#10;  }&#10;&#10;  if (!user) {&#10;    return (&#10;      &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded text-center&quot;&gt;&#10;        &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Unauthorized&lt;/h1&gt;&#10;        &lt;p&gt;Please log in to access the dashboard.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded text-center&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Dashboard&lt;/h1&gt;&#10;      &lt;p&gt;Welcome, {user.name || &quot;User&quot;}!&lt;/p&gt;&#10;      &lt;p&gt;Your email: {user.email}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useEffect } from &quot;react&quot;;&#10;&#10;export default function DashboardPage() {&#10;  const { user, loading } = useAuth();&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    if (!loading &amp;&amp; !user) {&#10;      router.replace(&quot;/login&quot;);&#10;    }&#10;  }, [user, loading, router]);&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded text-center&quot;&gt;Loading...&lt;/div&gt;;&#10;  }&#10;&#10;  if (!user) {&#10;    return (&#10;      &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded text-center&quot;&gt;&#10;        &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Unauthorized&lt;/h1&gt;&#10;        &lt;p&gt;Please log in to access the dashboard.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded text-center&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Dashboard&lt;/h1&gt;&#10;      &lt;p&gt;Welcome, {user.name || &quot;User&quot;}!&lt;/p&gt;&#10;      &lt;p&gt;Your email: {user.email}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/login/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/login/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import {useAuth} from &quot;@/hook/useAuth&quot;;&#10;&#10;&#10;export default function LoginPage() {&#10;  const { login, user, loading: authLoading } = useAuth();&#10;  const router = useRouter();&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;&#10;  // Use effect for redirecting when user state changes&#10;  useEffect(() =&gt; {&#10;    if (user &amp;&amp; !authLoading) {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }, [user, authLoading, router]);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      await login(email, password);&#10;      // No need to redirect here, the useEffect will handle it&#10;    } catch (err: any) {&#10;      setError(err?.response?.data?.message || &quot;Login failed&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Login&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        &lt;input&#10;          type=&quot;email&quot;&#10;          placeholder=&quot;Email&quot;&#10;          value={email}&#10;          onChange={e =&gt; setEmail(e.target.value)}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          placeholder=&quot;Password&quot;&#10;          value={password}&#10;          onChange={e =&gt; setPassword(e.target.value)}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          className=&quot;w-full bg-blue-600 text-white p-2 rounded disabled:opacity-50&quot;&#10;          disabled={loading}&#10;        &gt;&#10;          {loading ? &quot;Logging in...&quot; : &quot;Login&quot;}&#10;        &lt;/button&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import {useAuth} from &quot;@/hook/useAuth&quot;;&#10;&#10;&#10;export default function LoginPage() {&#10;  const { login, user, loading: authLoading } = useAuth();&#10;  const router = useRouter();&#10;  const [email, setEmail] = useState(&quot;&quot;);&#10;  const [password, setPassword] = useState(&quot;&quot;);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;&#10;  // Use effect for redirecting when user state changes&#10;  useEffect(() =&gt; {&#10;    if (user &amp;&amp; !authLoading) {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }, [user, authLoading, router]);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      await login(email, password);&#10;      // No need to redirect here, the useEffect will handle it&#10;    } catch (err: any) {&#10;      setError(err?.response?.data?.message || &quot;Login failed&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Login&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        &lt;input&#10;          type=&quot;email&quot;&#10;          placeholder=&quot;Email&quot;&#10;          value={email}&#10;          onChange={e =&gt; setEmail(e.target.value)}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          placeholder=&quot;Password&quot;&#10;          value={password}&#10;          onChange={e =&gt; setPassword(e.target.value)}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          className=&quot;w-full bg-blue-600 text-white p-2 rounded disabled:opacity-50&quot;&#10;          disabled={loading}&#10;        &gt;&#10;          {loading ? &quot;Logging in...&quot; : &quot;Login&quot;}&#10;        &lt;/button&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/register/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/register/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;import type { RegisterData } from '@/types/auth';&#10;import { UserRole } from '@/types/auth';&#10;&#10;export default function RegisterPage() {&#10;  const { register, user, loading: authLoading } = useAuth();&#10;  const router = useRouter();&#10;  const [form, setForm] = useState&lt;RegisterData&gt;({&#10;    name: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    password: &quot;&quot;,&#10;    password_confirmation: &quot;&quot;,&#10;    role: UserRole.USER,&#10;  });&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;&#10;  // Use effect for redirecting when user state changes&#10;  useEffect(() =&gt; {&#10;    if (user &amp;&amp; !authLoading) {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }, [user, authLoading, router]);&#10;&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLSelectElement&gt;) =&gt; {&#10;    setForm({ ...form, [e.target.name]: e.target.value });&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      await register(form);&#10;      router.push(&quot;/dashboard&quot;);&#10;    } catch (err: unknown) {&#10;      if (err &amp;&amp; typeof err === 'object' &amp;&amp; 'response' in err) {&#10;        setError((err as any)?.response?.data?.message || &quot;Registration failed&quot;);&#10;      } else {&#10;        setError(&quot;Registration failed&quot;);&#10;      }&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Register&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          name=&quot;name&quot;&#10;          placeholder=&quot;Name&quot;&#10;          value={form.name}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;email&quot;&#10;          name=&quot;email&quot;&#10;          placeholder=&quot;Email&quot;&#10;          value={form.email}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          name=&quot;phone&quot;&#10;          placeholder=&quot;Phone&quot;&#10;          value={form.phone}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;select&#10;          name=&quot;role&quot;&#10;          value={form.role}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        &gt;&#10;          &lt;option value={UserRole.USER}&gt;User&lt;/option&gt;&#10;          &lt;option value={UserRole.ADMIN}&gt;Admin&lt;/option&gt;&#10;          &lt;option value={UserRole.SUPER_ADMIN}&gt;Super Admin&lt;/option&gt;&#10;        &lt;/select&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          name=&quot;password&quot;&#10;          placeholder=&quot;Password&quot;&#10;          value={form.password}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          name=&quot;password_confirmation&quot;&#10;          placeholder=&quot;Confirm Password&quot;&#10;          value={form.password_confirmation}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          className=&quot;w-full bg-blue-600 text-white p-2 rounded disabled:opacity-50&quot;&#10;          disabled={loading}&#10;        &gt;&#10;          {loading ? &quot;Registering...&quot; : &quot;Register&quot;}&#10;        &lt;/button&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useAuth } from &quot;@/hook/useAuth&quot;;&#10;import type { RegisterData } from '@/types/auth';&#10;import { UserRole } from '@/types/auth';&#10;&#10;export default function RegisterPage() {&#10;  const { register, user, loading: authLoading } = useAuth();&#10;  const router = useRouter();&#10;  const [form, setForm] = useState&lt;RegisterData&gt;({&#10;    name: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    password: &quot;&quot;,&#10;    password_confirmation: &quot;&quot;,&#10;    role: UserRole.USER,&#10;  });&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [loading, setLoading] = useState(false);&#10;&#10;  // Use effect for redirecting when user state changes&#10;  useEffect(() =&gt; {&#10;    if (user &amp;&amp; !authLoading) {&#10;      router.replace(&quot;/dashboard&quot;);&#10;    }&#10;  }, [user, authLoading, router]);&#10;&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLSelectElement&gt;) =&gt; {&#10;    setForm({ ...form, [e.target.name]: e.target.value });&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setLoading(true);&#10;    setError(&quot;&quot;);&#10;    try {&#10;      await register(form);&#10;      router.push(&quot;/dashboard&quot;);&#10;    } catch (err: unknown) {&#10;      if (err &amp;&amp; typeof err === 'object' &amp;&amp; 'response' in err) {&#10;        setError((err as any)?.response?.data?.message || &quot;Registration failed&quot;);&#10;      } else {&#10;        setError(&quot;Registration failed&quot;);&#10;      }&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-md mx-auto mt-20 p-6 border rounded&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Register&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          name=&quot;name&quot;&#10;          placeholder=&quot;Name&quot;&#10;          value={form.name}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;email&quot;&#10;          name=&quot;email&quot;&#10;          placeholder=&quot;Email&quot;&#10;          value={form.email}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          name=&quot;phone&quot;&#10;          placeholder=&quot;Phone&quot;&#10;          value={form.phone}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;select&#10;          name=&quot;role&quot;&#10;          value={form.role}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        &gt;&#10;          &lt;option value={UserRole.USER}&gt;User&lt;/option&gt;&#10;          &lt;option value={UserRole.ADMIN}&gt;Admin&lt;/option&gt;&#10;          &lt;option value={UserRole.SUPER_ADMIN}&gt;Super Admin&lt;/option&gt;&#10;        &lt;/select&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          name=&quot;password&quot;&#10;          placeholder=&quot;Password&quot;&#10;          value={form.password}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;password&quot;&#10;          name=&quot;password_confirmation&quot;&#10;          placeholder=&quot;Confirm Password&quot;&#10;          value={form.password_confirmation}&#10;          onChange={handleChange}&#10;          className=&quot;w-full p-2 border rounded&quot;&#10;          required&#10;        /&gt;&#10;        {error &amp;&amp; &lt;div className=&quot;text-red-500&quot;&gt;{error}&lt;/div&gt;}&#10;        &lt;button&#10;          type=&quot;submit&quot;&#10;          className=&quot;w-full bg-blue-600 text-white p-2 rounded disabled:opacity-50&quot;&#10;          disabled={loading}&#10;        &gt;&#10;          {loading ? &quot;Registering...&quot; : &quot;Register&quot;}&#10;        &lt;/button&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/context/auth-context.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/context/auth-context.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import React, { createContext, useState, useEffect, ReactNode, useCallback, useMemo } from 'react';&#10;import Cookies from 'js-cookie';&#10;import type {&#10;  User,&#10;  RegisterData,&#10;  PasswordResetRequest,&#10;  PasswordResetData,&#10;  PasswordResetResponse,&#10;  AuthContextType,&#10;  LoginResponse&#10;} from '@/types/auth';&#10;import { UserRole } from '@/types/auth';&#10;import {axiosClient} from &quot;@/hook/axiosClient&quot;;&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const AuthProvider = ({ children }: { children: ReactNode }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;&#10;  // Login with identifier (email or phone) and password&#10;  const login = useCallback(async (identifier: string, password: string): Promise&lt;void&gt; =&gt; {&#10;    const payload = { identifier, password };&#10;    const { data } = await axiosClient.post&lt;LoginResponse&gt;('/login', payload);&#10;    Cookies.set('token', data.token);&#10;    setUser(data.user);&#10;  }, []);&#10;&#10;  // Register a new user&#10;  const register = useCallback(async (data: RegisterData): Promise&lt;void&gt; =&gt; {&#10;    try {&#10;      // Ensure role is one of the valid enum values&#10;      if (!Object.values(UserRole).includes(data.role)) {&#10;        data.role = UserRole.USER; // Default to user if invalid role&#10;      }&#10;&#10;      console.log('Sending registration data:', data);&#10;      const response = await axiosClient.post('/register', data);&#10;      console.log('Registration response:', response);&#10;&#10;      const identifier = data.email || data.phone;&#10;      await login(identifier, data.password);&#10;    } catch (error: any) {&#10;      console.error('Registration error:', error);&#10;      // Log more detailed error information if available&#10;      if (error.response) {&#10;        console.error('Error response:', error.response.data);&#10;        console.error('Error status:', error.response.status);&#10;      }&#10;      throw error;&#10;    }&#10;  }, [login]);&#10;&#10;  // Logout the current user&#10;  const logout = useCallback(async (): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.post('/logout');&#10;    Cookies.remove('token');&#10;    setUser(null);&#10;  }, []);&#10;&#10;  // Request password reset (email or phone)&#10;  const requestPasswordReset = useCallback(async (data: PasswordResetRequest): Promise&lt;PasswordResetResponse&gt; =&gt; {&#10;    const res = await axiosClient.post&lt;PasswordResetResponse&gt;('/request-password-reset', data);&#10;    return res.data;&#10;  }, []);&#10;&#10;  // Reset password (email+token or phone+code)&#10;  const resetPassword = useCallback(async (data: PasswordResetData): Promise&lt;PasswordResetResponse&gt; =&gt; {&#10;    const res = await axiosClient.post&lt;PasswordResetResponse&gt;('/reset-password', data);&#10;    return res.data;&#10;  }, []);&#10;&#10;  // Fetch the current user&#10;  const fetchUser = useCallback(async (): Promise&lt;void&gt; =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      // Check if token exists before attempting to fetch user&#10;      const token = Cookies.get('token');&#10;      if (!token) {&#10;        setUser(null);&#10;        setLoading(false);&#10;        return;&#10;      }&#10;      &#10;      const { data } = await axiosClient.get&lt;User&gt;('/user');&#10;      setUser(data);&#10;    } catch (error) {&#10;      console.error('Error fetching user:', error);&#10;      // Clear token if it's invalid&#10;      Cookies.remove('token');&#10;      setUser(null);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  // Fetch user on mount - with better control&#10;  useEffect(() =&gt; {&#10;    // Only fetch user if we haven't already determined the state&#10;    if (loading) {&#10;      void fetchUser();&#10;    }&#10;  }, [fetchUser, loading]);&#10;&#10;  // Memoize context value for performance&#10;  const value = useMemo(() =&gt; ({&#10;    user,&#10;    loading,&#10;    login,&#10;    logout,&#10;    register,&#10;    fetchUser,&#10;    requestPasswordReset,&#10;    resetPassword,&#10;  }), [user, loading, login, logout, register, fetchUser, requestPasswordReset, resetPassword]);&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={value}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export default AuthContext;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React, { createContext, useState, useEffect, ReactNode, useCallback, useMemo } from 'react';&#10;import Cookies from 'js-cookie';&#10;import type {&#10;  User,&#10;  RegisterData,&#10;  PasswordResetRequest,&#10;  PasswordResetData,&#10;  PasswordResetResponse,&#10;  AuthContextType,&#10;  LoginResponse&#10;} from '@/types/auth';&#10;import { UserRole } from '@/types/auth';&#10;import {axiosClient} from &quot;@/hook/axiosClient&quot;;&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const AuthProvider = ({ children }: { children: ReactNode }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;&#10;  // Login with identifier (email or phone) and password&#10;  const login = useCallback(async (identifier: string, password: string): Promise&lt;void&gt; =&gt; {&#10;    const payload = { identifier, password };&#10;    const { data } = await axiosClient.post&lt;LoginResponse&gt;('/login', payload);&#10;    Cookies.set('token', data.token);&#10;    setUser(data.user);&#10;  }, []);&#10;&#10;  // Register a new user&#10;  const register = useCallback(async (data: RegisterData): Promise&lt;void&gt; =&gt; {&#10;    try {&#10;      // Ensure role is one of the valid enum values&#10;      if (!Object.values(UserRole).includes(data.role)) {&#10;        data.role = UserRole.USER; // Default to user if invalid role&#10;      }&#10;&#10;      console.log('Sending registration data:', data);&#10;      const response = await axiosClient.post('/register', data);&#10;      console.log('Registration response:', response);&#10;&#10;      const identifier = data.email || data.phone;&#10;      await login(identifier, data.password);&#10;    } catch (error: any) {&#10;      console.error('Registration error:', error);&#10;      // Log more detailed error information if available&#10;      if (error.response) {&#10;        console.error('Error response:', error.response.data);&#10;        console.error('Error status:', error.response.status);&#10;      }&#10;      throw error;&#10;    }&#10;  }, [login]);&#10;&#10;  // Logout the current user&#10;  const logout = useCallback(async (): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.post('/logout');&#10;    Cookies.remove('token');&#10;    setUser(null);&#10;  }, []);&#10;&#10;  // Request password reset (email or phone)&#10;  const requestPasswordReset = useCallback(async (data: PasswordResetRequest): Promise&lt;PasswordResetResponse&gt; =&gt; {&#10;    const res = await axiosClient.post&lt;PasswordResetResponse&gt;('/request-password-reset', data);&#10;    return res.data;&#10;  }, []);&#10;&#10;  // Reset password (email+token or phone+code)&#10;  const resetPassword = useCallback(async (data: PasswordResetData): Promise&lt;PasswordResetResponse&gt; =&gt; {&#10;    const res = await axiosClient.post&lt;PasswordResetResponse&gt;('/reset-password', data);&#10;    return res.data;&#10;  }, []);&#10;&#10;  // Fetch the current user&#10;  const fetchUser = useCallback(async (): Promise&lt;void&gt; =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      // Check if token exists before attempting to fetch user&#10;      const token = Cookies.get('token');&#10;      if (!token) {&#10;        setUser(null);&#10;        setLoading(false);&#10;        return;&#10;      }&#10;      &#10;      const { data } = await axiosClient.get&lt;User&gt;('/user');&#10;      setUser(data);&#10;    } catch (error) {&#10;      console.error('Error fetching user:', error);&#10;      // Clear token if it's invalid&#10;      Cookies.remove('token');&#10;      setUser(null);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  // Fetch user on mount - with better control&#10;  useEffect(() =&gt; {&#10;    // Only fetch user if we haven't already determined the state&#10;    if (loading) {&#10;      void fetchUser();&#10;    }&#10;  }, [fetchUser, loading]);&#10;&#10;  // Memoize context value for performance&#10;  const value = useMemo(() =&gt; ({&#10;    user,&#10;    loading,&#10;    login,&#10;    logout,&#10;    register,&#10;    fetchUser,&#10;    requestPasswordReset,&#10;    resetPassword,&#10;  }), [user, loading, login, logout, register, fetchUser, requestPasswordReset, resetPassword]);&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={value}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export default AuthContext;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hook/axiosClient.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hook/axiosClient.ts" />
              <option name="originalContent" value="import axios, { AxiosInstance } from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;/**&#10; * axiosClient - Globally configured Axios instance&#10; * - Sets baseURL and withCredentials&#10; * - Attaches token from cookie to Authorization header&#10; * - Handles interceptors for request/response&#10; */&#10;export const axiosClient: AxiosInstance = (() =&gt; {&#10;  // If NEXT_PUBLIC_API_URL includes /api, use it as is&#10;  // Otherwise, append /api to ensure consistency with Laravel routes&#10;  let baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';&#10;  if (!baseURL.endsWith('/api')) {&#10;    baseURL = `${baseURL}/api`;&#10;  }&#10;&#10;  const instance = axios.create({&#10;    baseURL,&#10;    withCredentials: false, // Change to false to avoid CORS issues with wildcard origin&#10;    headers: {&#10;      'Content-Type': 'application/json',&#10;      'Accept': 'application/json',&#10;    }&#10;  });&#10;&#10;  // Request interceptor: attach token from cookie&#10;  instance.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  // Response interceptor: handle errors globally if needed&#10;  instance.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;      if (error.response?.status === 401) {&#10;        Cookies.remove('token');&#10;        if (typeof window !== 'undefined') {&#10;          window.location.href = '/login'; // Redirect to login on 401&#10;        }&#10;      }&#10;      return Promise.reject(error);&#10;    }&#10;  );&#10;&#10;  return instance;&#10;})();" />
              <option name="updatedContent" value="import axios, { AxiosInstance } from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;/**&#10; * axiosClient - Globally configured Axios instance&#10; * - Sets baseURL and withCredentials&#10; * - Attaches token from cookie to Authorization header&#10; * - Handles interceptors for request/response&#10; */&#10;export const axiosClient: AxiosInstance = (() =&gt; {&#10;  // If NEXT_PUBLIC_API_URL includes /api, use it as is&#10;  // Otherwise, append /api to ensure consistency with Laravel routes&#10;  let baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';&#10;  if (!baseURL.endsWith('/api')) {&#10;    baseURL = `${baseURL}/api`;&#10;  }&#10;&#10;  const instance = axios.create({&#10;    baseURL,&#10;    withCredentials: false, // Change to false to avoid CORS issues with wildcard origin&#10;    headers: {&#10;      'Content-Type': 'application/json',&#10;      'Accept': 'application/json',&#10;    }&#10;  });&#10;&#10;  // Request interceptor: attach token from cookie&#10;  instance.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  // Response interceptor: handle errors globally if needed&#10;  instance.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;      if (error.response?.status === 401) {&#10;        Cookies.remove('token');&#10;        if (typeof window !== 'undefined') {&#10;          window.location.href = '/login'; // Redirect to login on 401&#10;        }&#10;      }&#10;      return Promise.reject(error);&#10;    }&#10;  );&#10;&#10;  return instance;&#10;})();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hook/useAuth.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hook/useAuth.ts" />
              <option name="updatedContent" value="import { useContext } from 'react';&#10;import AuthContext from '../context/auth-context';&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) throw new Error('useAuth must be used within AuthProvider');&#10;  return context;&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/auth-context.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/auth-context.tsx" />
              <option name="originalContent" value="import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import axios from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;interface User {&#10;  id: number;&#10;  name: string;&#10;  email: string;&#10;  // Add more fields as needed&#10;}&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  loading: boolean;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; Promise&lt;void&gt;;&#10;  register: (data: { name: string; email: string; password: string; password_confirmation: string }) =&gt; Promise&lt;void&gt;;&#10;  fetchUser: () =&gt; Promise&lt;void&gt;;&#10;}&#10;&#10;interface LoginResponse {&#10;  token: string;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const AuthProvider = ({ children }: { children: ReactNode }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;&#10;  // Set axios defaults&#10;  axios.defaults.baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';&#10;  axios.defaults.withCredentials = true;&#10;&#10;  // Attach token from cookie if exists&#10;  axios.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  const fetchUser = async (): Promise&lt;void&gt; =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const { data } = await axios.get&lt;User&gt;('/api/user');&#10;      setUser(data);&#10;    } catch {&#10;      setUser(null);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string): Promise&lt;void&gt; =&gt; {&#10;    await axios.get('/sanctum/csrf-cookie');&#10;    const { data } = await axios.post&lt;LoginResponse&gt;('/login', { email, password });&#10;    Cookies.set('token', data.token);&#10;    await fetchUser();&#10;  };&#10;&#10;  const register = async (data: { name: string; email: string; password: string; password_confirmation: string }): Promise&lt;void&gt; =&gt; {&#10;    await axios.get('/sanctum/csrf-cookie');&#10;    await axios.post('/register', data);&#10;    await login(data.email, data.password);&#10;  };&#10;&#10;  const logout = async (): Promise&lt;void&gt; =&gt; {&#10;    await axios.post('/logout');&#10;    Cookies.remove('token');&#10;    setUser(null);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchUser();&#10;  }, []);&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, loading, login, logout, register, fetchUser }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) throw new Error('useAuth must be used within AuthProvider');&#10;  return context;&#10;};" />
              <option name="updatedContent" value="import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import Cookies from 'js-cookie';&#10;import { axiosClient } from './use-api';&#10;&#10;interface User {&#10;  id: number;&#10;  name: string;&#10;  email: string;&#10;  // Add more fields as needed&#10;}&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  loading: boolean;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; Promise&lt;void&gt;;&#10;  register: (data: { name: string; email: string; password: string; password_confirmation: string }) =&gt; Promise&lt;void&gt;;&#10;  fetchUser: () =&gt; Promise&lt;void&gt;;&#10;}&#10;&#10;interface LoginResponse {&#10;  token: string;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);&#10;&#10;export const AuthProvider = ({ children }: { children: ReactNode }) =&gt; {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState&lt;boolean&gt;(true);&#10;&#10;  const fetchUser = async (): Promise&lt;void&gt; =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const { data } = await axiosClient.get&lt;User&gt;('/api/user');&#10;      setUser(data);&#10;    } catch {&#10;      setUser(null);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.get('/sanctum/csrf-cookie');&#10;    const { data } = await axiosClient.post&lt;LoginResponse&gt;('/login', { email, password });&#10;    Cookies.set('token', data.token);&#10;    await fetchUser();&#10;  };&#10;&#10;  const register = async (data: { name: string; email: string; password: string; password_confirmation: string }): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.get('/sanctum/csrf-cookie');&#10;    await axiosClient.post('/register', data);&#10;    await login(data.email, data.password);&#10;  };&#10;&#10;  const logout = async (): Promise&lt;void&gt; =&gt; {&#10;    await axiosClient.post('/logout');&#10;    Cookies.remove('token');&#10;    setUser(null);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchUser();&#10;  }, []);&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, loading, login, logout, register, fetchUser }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) throw new Error('useAuth must be used within AuthProvider');&#10;  return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/use-api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/use-api.ts" />
              <option name="originalContent" value="import { useMemo } from 'react';&#10;import axios, { AxiosInstance } from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;/**&#10; * axiosClient - Globally configured Axios instance&#10; * - Sets baseURL and withCredentials&#10; * - Attaches token from cookie to Authorization header&#10; * - Handles interceptors for request/response&#10; */&#10;export const axiosClient: AxiosInstance = (() =&gt; {&#10;  const instance = axios.create({&#10;    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',&#10;    withCredentials: true,&#10;  });&#10;&#10;  // Request interceptor: attach token from cookie&#10;  instance.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  // Response interceptor: handle errors globally if needed&#10;  instance.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;      // You can handle global errors here (e.g., logout on 401)&#10;      return Promise.reject(error);&#10;    }&#10;  );&#10;&#10;  return instance;&#10;})();" />
              <option name="updatedContent" value="import { useMemo } from 'react';&#10;import axios, { AxiosInstance } from 'axios';&#10;import Cookies from 'js-cookie';&#10;&#10;/**&#10; * axiosClient - Globally configured Axios instance&#10; * - Sets baseURL and withCredentials&#10; * - Attaches token from cookie to Authorization header&#10; * - Handles interceptors for request/response&#10; */&#10;export const axiosClient: AxiosInstance = (() =&gt; {&#10;  const instance = axios.create({&#10;    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',&#10;    withCredentials: true,&#10;  });&#10;&#10;  // Request interceptor: attach token from cookie&#10;  instance.interceptors.request.use((config) =&gt; {&#10;    const token = Cookies.get('token');&#10;    if (token &amp;&amp; config.headers) {&#10;      config.headers['Authorization'] = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  });&#10;&#10;  // Response interceptor: handle errors globally if needed&#10;  instance.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;      // You can handle global errors here (e.g., logout on 401)&#10;      return Promise.reject(error);&#10;    }&#10;  );&#10;&#10;  return instance;&#10;})();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/types/auth.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/types/auth.ts" />
              <option name="originalContent" value="// Auth-related types for context, hooks, and API&#10;&#10;export enum UserRole {&#10;  USER = 'user',&#10;  ADMIN = 'admin',&#10;  SUPER_ADMIN = 'super-admin'&#10;}&#10;&#10;export interface User {&#10;  id: number;&#10;  name: string;&#10;  email?: string;&#10;  phone?: string;&#10;  role: UserRole;&#10;}&#10;&#10;export interface RegisterData {&#10;  name: string;&#10;  email: string;  // Changed from email?: string to make it required&#10;  phone: string;  // Changed from phone?: string to make it required&#10;  password: string;&#10;  password_confirmation: string;&#10;  role: UserRole;&#10;}&#10;&#10;export interface PasswordResetRequest {&#10;  email?: string;&#10;  phone?: string;&#10;}&#10;&#10;export interface PasswordResetData {&#10;  email?: string;&#10;  phone?: string;&#10;  token?: string;&#10;  code?: string;&#10;  password: string;&#10;  password_confirmation: string;&#10;}&#10;&#10;export interface PasswordResetResponse {&#10;  message: string;&#10;  code?: string;&#10;}&#10;&#10;export interface LoginResponse {&#10;  token: string;&#10;  user: User;&#10;}&#10;&#10;export interface AuthContextType {&#10;  user: User | null;&#10;  loading: boolean;&#10;  login: (identifier: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; Promise&lt;void&gt;;&#10;  register: (data: RegisterData) =&gt; Promise&lt;void&gt;;&#10;  fetchUser: () =&gt; Promise&lt;void&gt;;&#10;  requestPasswordReset: (data: PasswordResetRequest) =&gt; Promise&lt;PasswordResetResponse&gt;;&#10;  resetPassword: (data: PasswordResetData) =&gt; Promise&lt;PasswordResetResponse&gt;;&#10;}" />
              <option name="updatedContent" value="// Auth-related types for context, hooks, and API&#10;&#10;export enum UserRole {&#10;  USER = 'user',&#10;  ADMIN = 'admin',&#10;  SUPER_ADMIN = 'super-admin'&#10;}&#10;&#10;export interface User {&#10;  id: number;&#10;  name: string;&#10;  email?: string;&#10;  phone?: string;&#10;  role: UserRole;&#10;}&#10;&#10;export interface RegisterData {&#10;  name: string;&#10;  email: string;  // Changed from email?: string to make it required&#10;  phone: string;  // Changed from phone?: string to make it required&#10;  password: string;&#10;  password_confirmation: string;&#10;  role: UserRole;&#10;}&#10;&#10;export interface PasswordResetRequest {&#10;  email?: string;&#10;  phone?: string;&#10;}&#10;&#10;export interface PasswordResetData {&#10;  email?: string;&#10;  phone?: string;&#10;  token?: string;&#10;  code?: string;&#10;  password: string;&#10;  password_confirmation: string;&#10;}&#10;&#10;export interface PasswordResetResponse {&#10;  message: string;&#10;  code?: string;&#10;}&#10;&#10;export interface LoginResponse {&#10;  token: string;&#10;  user: User;&#10;}&#10;&#10;export interface AuthContextType {&#10;  user: User | null;&#10;  loading: boolean;&#10;  login: (identifier: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; Promise&lt;void&gt;;&#10;  register: (data: RegisterData) =&gt; Promise&lt;void&gt;;&#10;  fetchUser: () =&gt; Promise&lt;void&gt;;&#10;  requestPasswordReset: (data: PasswordResetRequest) =&gt; Promise&lt;PasswordResetResponse&gt;;&#10;  resetPassword: (data: PasswordResetData) =&gt; Promise&lt;PasswordResetResponse&gt;;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/types/js-cookie.d.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/types/js-cookie.d.ts" />
              <option name="updatedContent" value="// Type definitions for js-cookie&#10;// Project: https://github.com/js-cookie/js-cookie&#10;// Definitions by: Andi Dittrich &lt;https://github.com/AndiDittrich&gt;&#10;//                 Rafael Siegelmann &lt;https://github.com/rafaelsg&gt;&#10;//                 BendingBender &lt;https://github.com/BendingBender&gt;&#10;//                 Leonard Thieu &lt;https://github.com/leonard-thieu&gt;&#10;// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped&#10;&#10;export interface CookieAttributes {&#10;    expires?: number | Date;&#10;    path?: string;&#10;    domain?: string;&#10;    secure?: boolean;&#10;    sameSite?: 'strict' | 'lax' | 'none';&#10;}&#10;&#10;export interface CookiesStatic&lt;T = undefined&gt; {&#10;    get(name: string): string | undefined;&#10;    get(): { [key: string]: string };&#10;    set(name: string, value: string, options?: CookieAttributes): void;&#10;    remove(name: string, options?: CookieAttributes): void;&#10;}&#10;&#10;declare const Cookies: CookiesStatic;&#10;export default Cookies;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>